# -*- coding: utf-8 -*-
"""AI Capstone HW1 - nonImage

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fPAIuHKqvErhcd9RtOA7tzlMl45NyLY8

# **AI Capstone HW1 - nonImage**
"""

import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split, KFold
from sklearn.metrics import confusion_matrix, classification_report

"""### **Data Input**"""

DF=pd.read_csv("./train.csv")
DF

df_X = DF.drop(['id','target'], axis=1)
df_X

df_y = DF['target']
df_y

"""### **Decision Tree**

"""

def decision_tree(Xdata, ydata, pcaFlag):
  y_TEST=[]
  y_PREDICT=[]
  kf=KFold(n_splits=5,shuffle=True)

  for index_train,index_test in kf.split(Xdata):
   
    x_train=Xdata.iloc[index_train]
    x_test=Xdata.iloc[index_test]
    y_train=ydata[index_train]
    y_test=ydata[index_test]

    if pcaFlag:
      pca = PCA(n_components='mle')
      x_train, x_test = pca.fit_transform(x_train), pca.transform(x_test)
    
    train=DecisionTreeClassifier()
    train.fit(x_train,y_train)
    y_predict=train.predict(x_test)

    y_TEST.extend(y_test)
    y_PREDICT.extend(y_predict)

  print("Confusion matrix: \n",confusion_matrix(y_test,y_predict)/5)
  print("\nReport: \n",classification_report(y_test,y_predict))

decision_tree(df_X, df_y, False)

decision_tree(df_X, df_y, True)

"""### **Naive Bayes**"""

def naive_bayes(Xdata, ydata, pcaFlag):
  y_TEST=[]
  y_PREDICT=[]
  kf=KFold(n_splits=5,shuffle=True)

  for index_train,index_test in kf.split(Xdata):
   
    x_train=Xdata.iloc[index_train]
    x_test=Xdata.iloc[index_test]
    y_train=ydata[index_train]
    y_test=ydata[index_test]

    if pcaFlag:
      pca = PCA(n_components='mle')
      x_train, x_test = pca.fit_transform(x_train), pca.transform(x_test)
    
    train=GaussianNB()
    train.fit(x_train,y_train)
    y_predict=train.predict(x_test)

    y_TEST.extend(y_test)
    y_PREDICT.extend(y_predict)

  print("Confusion matrix: \n",confusion_matrix(y_test,y_predict)/5)
  print("\nReport: \n",classification_report(y_test,y_predict))

naive_bayes(df_X, df_y, False)

naive_bayes(df_X, df_y, True)

"""### **Logistic Regression**"""

def logreg(Xdata, ydata, pcaFlag):
  y_TEST=[]
  y_PREDICT=[]
  kf=KFold(n_splits=5,shuffle=True)

  for index_train,index_test in kf.split(Xdata):
   
    x_train=Xdata.iloc[index_train]
    x_test=Xdata.iloc[index_test]
    y_train=ydata[index_train]
    y_test=ydata[index_test]

    if pcaFlag:
      pca = PCA(n_components='mle')
      x_train, x_test = pca.fit_transform(x_train), pca.transform(x_test)
    
    train=GaussianNB()
    train.fit(x_train,y_train)
    y_predict=train.predict(x_test)

    y_TEST.extend(y_test)
    y_PREDICT.extend(y_predict)

  print("Confusion matrix: \n",confusion_matrix(y_test,y_predict)/5)
  print("\nReport: \n",classification_report(y_test,y_predict))

logreg(df_X, df_y, False)

logreg(df_X, df_y, True)

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# jupyter nbconvert --to html /content/AI_Capstone_HW1_nonImage.ipynb