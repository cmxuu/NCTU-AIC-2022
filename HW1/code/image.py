# -*- coding: utf-8 -*-
"""AI Capstone HW1 - Image

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VTlLk6eu9Ri701ms4Xujfe3y3yGwIQpv

# **AI Capstone HW1 - Image**
"""

import numpy as np
import pandas as pd
import torch
from PIL import Image
from torchvision import datasets, transforms
from sklearn import tree, ensemble
from sklearn.neighbors import KNeighborsClassifier
from sklearn import svm
from sklearn.neural_network import MLPClassifier
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split, KFold, cross_val_score
from sklearn.metrics import confusion_matrix, classification_report

"""# Data Input ï¼‹ Preprocessing"""

class NPDataset(torch.utils.data.Dataset):
  def __init__(self, data, target):
    self.data = np.load(data).astype('float')
    self.target = np.load(target).astype('float')
    self.transforms = transforms.Compose([
      transforms.ToTensor()
    ])
  def __getitem__(self, index):
    x = torch.tensor(np.reshape(self.data[index], (28, 28))).float()
    x = x.unsqueeze(0)
    y = torch.tensor(self.target[index]).long()
    return x, y
  
  def __len__(self):
    return len(self.data)

dataset = NPDataset('data.npy', 'target.npy')

pca=PCA(n_components='mle')
pca.fit(dataset.data).transform(dataset.data)

pca.n_components_

"""# Random Forest"""

def Forest_Kfold(n):
  x=dataset.data
  y=dataset.target
  y_TEST=[]
  y_PREDICT=[]
  kf=KFold(n_splits=5,shuffle=True)
  for index_train,index_test in kf.split(dataset):
    x_train=x[index_train]
    x_test=x[index_test]
    y_train=y[index_train]
    y_test=y[index_test]
    train=ensemble.RandomForestClassifier(n_estimators=n)
    train.fit(x_train,y_train)
    y_predict=train.predict(x_test)
    y_TEST.extend(y_test)
    y_PREDICT.extend(y_predict)

  print("Confusion matrix: \n",confusion_matrix(y_TEST,y_PREDICT)/5)
  print("\nReport: \n",classification_report(y_TEST,y_PREDICT))

Forest_Kfold(10)

Forest_Kfold(50)

Forest_Kfold(100)

"""# KNN"""

def KNN_Kfold(n):
  x=dataset.data
  y=dataset.target
  y_TEST=[]
  y_PREDICT=[]
  kf=KFold(n_splits=5,shuffle=True)
  for index_train,index_test in kf.split(dataset):
    x_train=x[index_train]
    x_test=x[index_test]
    y_train=y[index_train]
    y_test=y[index_test]
    train=KNeighborsClassifier(n_neighbors=n)
    train.fit(x_train,y_train)
    y_predict=train.predict(x_test)
    y_TEST.extend(y_test)
    y_PREDICT.extend(y_predict)

  print("Confusion matrix: \n",confusion_matrix(y_TEST,y_PREDICT)/5)
  print("\nReport: \n",classification_report(y_TEST,y_PREDICT))

KNN_Kfold(5)

KNN_Kfold(10)

KNN_Kfold(50)

"""# CNN"""

def CNN_Kfold():
  x=dataset.data
  y=dataset.target
  y_TEST=[]
  y_PREDICT=[]
  kf=KFold(n_splits=5,shuffle=True)
  for index_train,index_test in kf.split(dataset):
    x_train=x[index_train]
    x_test=x[index_test]
    y_train=y[index_train]
    y_test=y[index_test]
    train=MLPClassifier(hidden_layer_sizes=(1024, 256, 32), activation='relu', solver='adam', alpha=1e-4, random_state=0, max_iter=400, verbose=10)
    train.fit(x_train,y_train)
    y_predict=train.predict(x_test)
    y_TEST.extend(y_test)
    y_PREDICT.extend(y_predict)

  print("Confusion matrix: \n",confusion_matrix(y_TEST,y_PREDICT)/5)
  print("\nReport: \n",classification_report(y_TEST,y_PREDICT))

CNN_Kfold()

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# jupyter nbconvert --to html /content/AI_Capstone_HW1_Image.ipynb