# -*- coding: utf-8 -*-
"""AI Capstone HW1 - self

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kYXwwzdzEFp6O0t6ty373Xie95hOe_14

# **AI Capstone HW1 - self**
"""

import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split, KFold
from sklearn.metrics import confusion_matrix, classification_report

"""### **Data Input**"""

DF_50=pd.read_csv("./dessert_50.csv")
DF_50

DF_50.describe()

df_50_X = DF_50.drop(['分類'], axis=1)
df_50_y = DF_50['分類']

DF_25=pd.read_csv("./dessert_25.csv")
DF_25

DF_25.describe()

df_25_X = DF_25.drop(['分類'], axis=1)
df_25_y = DF_25['分類']

"""### **Decision Tree**

"""

def decision_tree(Xdata, ydata):
  y_TEST=[]
  y_PREDICT=[]
  kf=KFold(n_splits=5,shuffle=True)

  for index_train,index_test in kf.split(Xdata):
   
    x_train=Xdata.iloc[index_train]
    x_test=Xdata.iloc[index_test]
    y_train=ydata[index_train]
    y_test=ydata[index_test]
    
    train=DecisionTreeClassifier()
    train.fit(x_train,y_train)
    y_predict=train.predict(x_test)

    y_TEST.extend(y_test)
    y_PREDICT.extend(y_predict)

  print("Confusion matrix: \n",confusion_matrix(y_test,y_predict)/5)
  print("\nReport: \n",classification_report(y_test,y_predict))

decision_tree(df_50_X, df_50_y)

decision_tree(df_25_X, df_25_y)

"""### **Naive Bayes**"""

def naive_bayes(Xdata, ydata):
  y_TEST=[]
  y_PREDICT=[]
  kf=KFold(n_splits=5,shuffle=True)

  for index_train,index_test in kf.split(Xdata):
   
    x_train=Xdata.iloc[index_train]
    x_test=Xdata.iloc[index_test]
    y_train=ydata[index_train]
    y_test=ydata[index_test]
    
    train=GaussianNB()
    train.fit(x_train,y_train)
    y_predict=train.predict(x_test)

    y_TEST.extend(y_test)
    y_PREDICT.extend(y_predict)

  print("Confusion matrix: \n",confusion_matrix(y_test,y_predict)/5)
  print("\nReport: \n",classification_report(y_test,y_predict))

naive_bayes(df_50_X, df_50_y)

naive_bayes(df_25_X, df_25_y)

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# jupyter nbconvert --to html /content/AI_Capstone_HW1_self.ipynb